#include <iostream>
#include <vector>
#include <memory>
#include <cmath>
#include <limits>
#include <stdexcept>

// Базовый класс Shape
class Shape {
public:
    virtual double area() const = 0;
    virtual double perimeter() const = 0;
    virtual void displayInfo() const {
        std::cout << "This is a generic shape." << std::endl;
    }
    virtual ~Shape() {}
};

// Производный класс Circle
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double radius) : radius(radius) {
        if (radius <= 0) {
            throw std::invalid_argument("Radius must be positive.");
        }
    }

    double area() const override {
        return M_PI * radius * radius;
    }

    double perimeter() const override {
        return 2 * M_PI * radius;
    }

    void displayInfo() const override {
        std::cout << "Circle: Radius = " << radius
                  << ", Area = " << area()
                  << ", Perimeter = " << perimeter() << std::endl;
    }
};

// Производный класс Rectangle
class Rectangle : public Shape {
private:
    double width;
    double height;

public:
    Rectangle(double width, double height) : width(width), height(height) {
        if (width <= 0 || height <= 0) {
            throw std::invalid_argument("Width and height must be positive.");
        }
    }

    double area() const override {
        return width * height;
    }

    double perimeter() const override {
        return 2 * (width + height);
    }

    void displayInfo() const override {
        std::cout << "Rectangle: Width = " << width
                  << ", Height = " << height
                  << ", Area = " << area()
                  << ", Perimeter = " << perimeter() << std::endl;
    }
};

// Производный класс Triangle
class Triangle : public Shape {
private:
    double side1;
    double side2;
    double side3;

public:
    Triangle(double side1, double side2, double side3)
        : side1(side1), side2(side2), side3(side3) {
        if (side1 <= 0 || side2 <= 0 || side3 <= 0) {
            throw std::invalid_argument("Sides must be positive.");
        }
        if (side1 + side2 <= side3 || side1 + side3 <= side2 || side2 + side3 <= side1) {
            throw std::invalid_argument("Invalid triangle sides.");
        }
    }

    double area() const override {
        // Формула Герона
        double s = perimeter() / 2;
        return std::sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    double perimeter() const override {
        return side1 + side2 + side3;
    }

    void displayInfo() const override {
        std::cout << "Triangle: Sides = " << side1 << ", " << side2 << ", " << side3
                  << ", Area = " << area()
                  << ", Perimeter = " << perimeter() << std::endl;
    }
};

// Класс для управления фигурами
class ShapeManager {
private:
    std::vector<std::unique_ptr<Shape>> shapes;

public:
    void addShape(std::unique_ptr<Shape> shape) {
        shapes.push_back(std::move(shape));
    }

    void displayAllShapes() const {
        if (shapes.empty()) {
            std::cout << "No shapes available." << std::endl;
            return;
        }
        for (size_t i = 0; i < shapes.size(); ++i) {
            std::cout << "Shape #" << i + 1 << ":\n";
            shapes[i]->displayInfo();
            std::cout << "---------------------" << std::endl;
        }
    }
};

// Функция для ввода данных и создания фигуры
std::unique_ptr<Shape> createShape() {
    std::cout << "Enter the number of parameters (1 for Circle, 2 for Rectangle, 3 for Triangle): ";
    int choice;
    std::cin >> choice;

    if (choice == 1) {
        double radius;
        std::cout << "Enter the radius of the circle: ";
        std::cin >> radius;
        return std::make_unique<Circle>(radius);
    } else if (choice == 2) {
        double width, height;
        std::cout << "Enter the width and height of the rectangle: ";
        std::cin >> width >> height;
        return std::make_unique<Rectangle>(width, height);
    } else if (choice == 3) {
        double side1, side2, side3;
        std::cout << "Enter the three sides of the triangle: ";
        std::cin >> side1 >> side2 >> side3;
        return std::make_unique<Triangle>(side1, side2, side3);
    } else {
        throw std::invalid_argument("Invalid choice.");
    }
}

int main() {
    ShapeManager manager;

    while (true) {
        std::cout << "\n1. Add a shape\n2. Display all shapes\n3. Exit\n";
        int option;
        std::cin >> option;

        try {
            if (option == 1) {
                auto shape = createShape();
                manager.addShape(std::move(shape));
            } else if (option == 2) {
                manager.displayAllShapes();
            } else if (option == 3) {
                break;
            } else {
                std::cout << "Invalid option! Please try again." << std::endl;
            }
        } catch (const std::exception& e) {
            std::cout << "Error: " << e.what() << std::endl;
        }

        // Очистка буфера ввода
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }

    return 0;
}
